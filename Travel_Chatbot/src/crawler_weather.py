# -*- coding: utf-8 -*-
import urllib
from urllib.request import urlopen, Request

import bs4

state = None
slot_data = None
positions = (None, None, None)
end_flag = True

def __tone_maker(weather_morning, weather_noon):
    if weather_morning[0] == "ÌùêÎ¶º":
        weather_morning[0] = 'ÌùêÎ¶¨Í≥†'
    elif weather_morning[0] == "ÎßëÏùå":
        weather_morning[0] = 'ÎßëÍ≥†'
    elif weather_morning[0] == "Íµ¨Î¶ÑÏ°∞Í∏à":
        weather_morning[0] = 'Íµ¨Î¶ÑÏù¥ Ï°∞Í∏à ÎÅºÏóàÍ≥†'
    elif weather_morning[0] == "Íµ¨Î¶ÑÎßéÏùå":
        weather_morning[0] = 'Íµ¨Î¶ÑÏù¥ ÎßéÏù¥ ÎÅºÏóàÍ≥†'
    elif weather_morning[0] == "Íµ¨Î¶ÑÎßéÍ≥† ÌïúÎïå ÎπÑ":
        weather_morning[0] = 'Íµ¨Î¶ÑÏù¥ ÎßéÏù¥ ÎÅºÍ≥† ÌïúÎïå ÎπÑÍ∞Ä ÎÇ¥Î¶¥ Ïàò ÏûàÏúºÎ©∞'
    elif weather_morning[0] == "ÎπÑ":
        weather_morning[0] = 'ÎπÑÍ∞Ä ÎÇ¥Î¶¨Í≥†'
    elif weather_morning[0] == "Îàà":
        weather_morning[0] = 'ÎààÏù¥ ÎÇ¥Î¶¨Í≥†'
    elif weather_morning[0] == "Ïö∞Î∞ï":
        weather_morning[0] = 'Ïö∞Î∞ïÏù¥ Îñ®Ïñ¥ÏßÄÍ≥†'
    elif weather_morning[0] == "ÌùêÎ¶¨Í≥† Í∞ÄÎÅî ÎπÑ":
        weather_morning[0] = 'ÌùêÎ¶¨Í≥† Í∞ÄÎÅî ÎπÑÍ∞Ä ÎÇ¥Î¶¥ Ïàò ÏûàÏúºÎ©∞'
    if weather_noon[0] == "ÌùêÎ¶º":
        weather_noon[0] = 'ÌùêÎ¶¨Í≥†'
    elif weather_noon[0] == "ÎßëÏùå":
        weather_noon[0] = 'ÎßëÍ≥†'
    elif weather_noon[0] == "Íµ¨Î¶ÑÏ°∞Í∏à":
        weather_noon[0] = 'Íµ¨Î¶ÑÏù¥ Ï°∞Í∏à ÎÅºÏóàÍ≥†'
    elif weather_noon[0] == "Íµ¨Î¶ÑÎßéÏùå":
        weather_noon[0] = 'Íµ¨Î¶ÑÏù¥ ÎßéÏù¥ ÎÅºÏóàÍ≥†'
    elif weather_noon[0] == "Íµ¨Î¶ÑÎßéÍ≥† ÌïúÎïå ÎπÑ":
        weather_noon[0] = 'Íµ¨Î¶ÑÏù¥ ÎßéÏù¥ ÎÅºÍ≥† ÌïúÎïå ÎπÑÍ∞Ä ÎÇ¥Î¶¥ Ïàò ÏûàÏúºÎ©∞'
    elif weather_noon[0] == "ÎπÑ":
        weather_noon[0] = 'ÎπÑÍ∞Ä ÎÇ¥Î¶¨Í≥†'
    elif weather_noon[0] == "Îàà":
        weather_noon[0] = 'ÎààÏù¥ ÎÇ¥Î¶¨Í≥†'
    elif weather_noon[0] == "Ïö∞Î∞ï":
        weather_noon[0] = 'Ïö∞Î∞ïÏù¥ Îñ®Ïñ¥ÏßÄÍ≥†'
    elif weather_noon[0] == "ÌùêÎ¶¨Í≥† Í∞ÄÎÅî ÎπÑ":
        weather_noon[0] = 'ÌùêÎ¶¨Í≥† Í∞ÄÎÅî ÎπÑÍ∞Ä ÎÇ¥Î¶¥ Ïàò ÏûàÏúºÎ©∞'

    return weather_morning, weather_noon



def today_weather(location):
    global state, slot_data, positions, end_flag
    print("[DEBUG1-1]today_weather (location) >>", location)
    enc_location = urllib.parse.quote(location + 'Ïò§Îäò ÎÇ†Ïî®')
    url = 'https://search.naver.com/search.naver?ie=utf8&query=' + enc_location

    req = Request(url)
    page = urlopen(req)
    html = page.read()
    soup = bs4.BeautifulSoup(html, 'html.parser')

    try:
        temperature = (soup
                       .find('div', class_='info_data')
                       .find('p', class_='info_temperature')
                       .find('span', class_='todaytemp').text) + 'ÎèÑ'

        weather = (soup
                   .find('div', class_='info_data')
                   .find('ul', class_='info_list')
                   .find('li')
                   .find('p', class_='cast_txt').text).split(',')

        if weather[0] == 'ÎπÑ':
            weather = 'Ïò§ÎäòÏùÄ Ïö∞ÏÇ∞ÏùÑ Ï±ôÍ≤®Ïïº Ìï†ÏßÄÎèÑ Î™∞ÎùºÏöî. ‚òÇ Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'ÎπÑÍ∞Ä ÏôÄÏöî. üåß\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'ÎßëÏùå':
            weather = 'Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'Ìï¥Í∞Ä Îñ¥Ïñ¥Ïöî. ÏïÑÏ£º ÎßëÏïÑÏöî. üå§\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'ÌùêÎ¶º':
            weather = 'Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'Íµ¨Î¶ÑÏù¥ ÎÅºÏñ¥ÏûàÏùÑ Í±∞ÏóêÏöî. ÎÇ†Ïî®Í∞Ä ÍΩ§ÎÇò ÌùêÎ†§Ïöî. ‚õÖ\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'Íµ¨Î¶ÑÎßéÍ≥† ÌïúÎïå ÎπÑ':
            weather = 'Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'Íµ¨Î¶ÑÏù¥ ÎÅºÏñ¥ÏûàÍ≥† ÌïúÎïå ÎπÑÍ∞Ä Ïò¨ ÏàòÎèÑ ÏûàÏñ¥Ïöî. ÎÇ†Ïî®Í∞Ä ÍΩ§ÎÇò ÌùêÎ†§Ïöî. üå¶\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'Íµ¨Î¶ÑÎßéÏùå':
            weather = 'Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'Íµ¨Î¶ÑÏù¥ ÎßéÏù¥ ÎßéÏù¥ ÎÅºÏñ¥ÏûàÏñ¥Ïöî. ‚òÅ\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'Íµ¨Î¶ÑÏ°∞Í∏à':
            weather = 'Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'Íµ¨Î¶ÑÏù¥ Ï°∞Í∏à ÎÅºÏñ¥ÏûàÏñ¥Ïöî. ‚õÖ\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'Îàà':
            weather = 'Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'ÎààÏù¥ ÏôÄÏöî. üå® Ï∂îÏö∏ÌÖåÎãàÍπå Ïò∑ÏùÑ Îî∞ÎúªÌïòÍ≤å ÏûÖÍ≥† Í∞ÄÏöî. üß§üß£\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'Ïö∞Î∞ï':
            weather = 'Ï°∞Ïã¨ÌïòÏÑ∏Ïöî! üò≤ Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'Ïö∞Î∞ïÏù¥ ÎÇ¥Î†§Ïöî. ‚òÑ\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')
        elif weather[0] == 'ÌùêÎ¶¨Í≥† Í∞ÄÎÅî ÎπÑ':
            weather = 'Ïò§ÎäòÏùÄ Ïö∞ÏÇ∞ÏùÑ Ï±ôÍ≤®Ïïº Ìï†ÏßÄÎèÑ Î™∞ÎùºÏöî. ‚òÇ Ïò§Îäò ' + location + 'ÏóêÎäî ' + 'ÎπÑÍ∞Ä Ïò¨ Ïàò ÏûàÍ≥† ÌùêÎ¶∞ ÎÇ†Ïî®ÏóêÏöî. üåß\n\n' + \
                      'ÌòÑÏû¨ Ïò®ÎèÑÎäî ' + temperature + 'Î°ú' + weather[1].replace('Àö', 'ÎèÑ')

        template_msg = 'Ïò§Îäò ' + location + ' ÎÇ†Ïî® ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî. üòÉ\n\n' + weather
        # üòé üòä üòÉ

    except:
        print("############################")
        print("#  WEATHER CRAWLER ERROR   #")
        print("############################")

        template_msg = "Ï£ÑÏÜ°Ìï¥Ïöî, ÏßÄÍ∏àÏùÄ " + location + "Ïùò ÎÇ†Ïî®Îäî Ïïå Ïàò ÏóÜÏñ¥Ïöî.  üò≠" + "\n\n" + "ÏßÄÏó≠Ïùò Ïù¥Î¶ÑÏùÑ ÏïåÎ†§Ï£ºÏãúÎ©¥ Îã§Ïãú ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî."

    print("\n\n[DEBUG2-1]today_weather (msg) >>\n", template_msg, end="\n\n")
    return template_msg, state, slot_data, None, positions, end_flag



def tomorrow_weather(location):
    global state, slot_data, positions
    enc_location = urllib.parse.quote(location + ' ÎÇ¥Ïùº ÎÇ†Ïî®')
    url = 'https://search.naver.com/search.naver?ie=utf8&query=' + enc_location

    req = Request(url)
    page = urlopen(req)
    html = page.read()
    soup = bs4.BeautifulSoup(html, 'html.parser')

    try:
        temperature_morning = (soup
                               .find_all('div', class_='main_info morning_box')[0]
                               .find('span', class_='todaytemp').text) + 'ÎèÑ'

        temperature_noon = (soup
                            .find_all('div', class_='main_info morning_box')[1]
                            .find('span', class_='todaytemp').text) + 'ÎèÑ'

        weather_morning = (soup
                           .find_all('div', class_='main_info morning_box')[0]
                           .find('div', class_='info_data')
                           .find('ul', class_='info_list')
                           .find('li')
                           .find('p', class_='cast_txt').text).split(',')

        weather_noon = (soup
                        .find_all('div', class_='main_info morning_box')[1]
                        .find('div', class_='info_data')
                        .find('ul', class_='info_list')
                        .find('li')
                        .find('p', class_='cast_txt').text).split(',')
        glue = 'ÏóêÎäî'
        if weather_morning[0] == weather_noon[0]:
            glue = 'ÏóêÎèÑ'

        weather_morning, weather_noon = __tone_maker(weather_morning, weather_noon)
        template_msg = 'ÎÇ¥Ïùº ' + location + ' ÎÇ†Ïî® ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî. üòÉ\n\n' + 'ÎÇ¥Ïùº Ïò§Ï†ÑÏóî ' + weather_morning[
            0] + ' , Í∏∞Ïò®ÏùÄ ' + temperature_morning + 'ÏóêÏöî.\n\n' + 'Ïò§ÌõÑ' + glue + ' ' + weather_noon[
                           0] + ' , Í∏∞Ïò®ÏùÄ ' + temperature_noon + 'ÏûÖÎãàÎã§.'

        if 'ÎπÑÍ∞Ä ÎÇ¥' in template_msg:
            template_msg += ' ÎÇ¥ÏùºÏùÄ Ïö∞ÏÇ∞ÏùÑ Ï±ôÍ∏∞ÎäîÍ≤å Ï¢ãÏùÑ Í≤É Í∞ôÏïÑÏöî. ‚òî'

        elif 'ÎààÏù¥ ÎÇ¥' in template_msg:
            template_msg += ' ÎÇ¥Ïùº ÎÇòÍ∞ÄÏã†Îã§Î©¥ Îî∞ÎúªÌïòÍ≤å ÏûÖÍ≥† ÎÇòÍ∞ÄÏãúÎäîÍ≤å Ï¢ãÏùÑ Í≤É Í∞ôÏïÑÏöî. üß£üß§'

        elif 'Ïö∞Î∞ïÏù¥' in template_msg:
            template_msg += ' ÎÇ¥ÏùºÏùÄ Ïö∞Î∞ïÏùÑ Íº≠ Ï°∞Ïã¨ÌïòÏÑ∏Ïöî! üå®'

    except:
        print("############################")
        print("#  WEATHER CRAWLER ERROR   #")
        print("############################")

        template_msg = "Ï£ÑÏÜ°Ìï¥Ïöî, ÏßÄÍ∏àÏùÄ " + location + "Ïùò ÎÇ†Ïî®Îäî Ïïå Ïàò ÏóÜÏñ¥Ïöî.  üò•" + "\n\n" + "ÏßÄÏó≠Ïùò Ïù¥Î¶ÑÏùÑ ÏïåÎ†§Ï£ºÏãúÎ©¥ Îã§Ïãú ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî."

    print("\n\n[DEBUG2-2]tomorrow_weather (msg) >>\n", template_msg, end="\n\n")
    return template_msg, state, slot_data, None, positions, end_flag



def after_tomorrow_weather(location):
    global state, slot_data, positions
    enc_location = urllib.parse.quote(location + ' Î™®Î†à ÎÇ†Ïî®')
    url = 'https://search.naver.com/search.naver?ie=utf8&query=' + enc_location

    req = Request(url)
    page = urlopen(req)
    html = page.read()
    soup = bs4.BeautifulSoup(html, 'html.parser')

    try:
        temperature_morning = (soup
                               .find('div', class_='tomorrow_area day_after _mainTabContent')
                               .find_all('div', class_='main_info morning_box')[0]
                               .find('span', class_='todaytemp').text) + 'ÎèÑ'

        temperature_noon = (soup
                            .find('div', class_='tomorrow_area day_after _mainTabContent')
                            .find_all('div', class_='main_info morning_box')[1]
                            .find('span', class_='todaytemp').text) + 'ÎèÑ'

        weather_morning = (soup
                           .find('div', class_='tomorrow_area day_after _mainTabContent')
                           .find_all('div', class_='main_info morning_box')[0]
                           .find('div', class_='info_data')
                           .find('ul', class_='info_list')
                           .find('li')
                           .find('p', class_='cast_txt').text).split(',')

        weather_noon = (soup
                        .find('div', class_='tomorrow_area day_after _mainTabContent')
                        .find_all('div', class_='main_info morning_box')[1]
                        .find('div', class_='info_data')
                        .find('ul', class_='info_list')
                        .find('li')
                        .find('p', class_='cast_txt').text).split(',')
        glue = 'ÏóêÎäî'
        if weather_morning[0] == weather_noon[0]:
            glue = 'ÏóêÎèÑ'

        weather_morning, weather_noon = __tone_maker(weather_morning, weather_noon)
        template_msg = 'Î™®Î†à ' + location + ' ÎÇ†Ïî® ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî. üòÉ\n\n' + 'Î™®Î†à Ïò§Ï†ÑÏóî ' + weather_morning[
            0] + ' , Í∏∞Ïò®ÏùÄ ' + temperature_morning + '\n\n' + 'Ïò§ÌõÑ' + glue + ' ' + weather_noon[
                           0] + ' , Í∏∞Ïò®ÏùÄ ' + temperature_noon + 'ÏûÖÎãàÎã§.'

        if 'ÎπÑÍ∞Ä ÎÇ¥' in template_msg:
            template_msg += ' Î™®Î†àÎäî Ïö∞ÏÇ∞ÏùÑ Ï±ôÍ∏∞ÎäîÍ≤å Ï¢ãÏùÑ Í≤É Í∞ôÏïÑÏöî. ‚òî'
        elif 'ÎààÏù¥ ÎÇ¥' in template_msg:
            template_msg += ' Î™®Î†à ÎÇòÍ∞ÄÏã†Îã§Î©¥ Îî∞ÎúªÌïòÍ≤å ÏûÖÍ≥† ÎÇòÍ∞ÄÏãúÎäîÍ≤å Ï¢ãÏùÑ Í≤É Í∞ôÏïÑÏöî. üß§üß£'
        elif 'Ïö∞Î∞ïÏù¥' in template_msg:
            template_msg += ' Î™®Î†àÎäî Ïö∞Î∞ïÏùÑ Íº≠ Ï°∞Ïã¨ÌïòÏÑ∏Ïöî! üå®'

    except:
        print("############################")
        print("#  WEATHER CRAWLER ERROR   #")
        print("############################")

        template_msg = "Ï£ÑÏÜ°Ìï¥Ïöî, ÏßÄÍ∏àÏùÄ " + location + "Ïùò ÎÇ†Ïî®Îäî Ïïå Ïàò ÏóÜÏñ¥Ïöî.  üò≠" + "\n\n" + "ÏßÄÏó≠Ïùò Ïù¥Î¶ÑÏùÑ ÏïåÎ†§Ï£ºÏãúÎ©¥ Îã§Ïãú ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî."

    print("\n\n[DEBUG2-2]after_tomorrow_weather (msg) >>\n", template_msg, end="\n\n")
    return template_msg, state, slot_data, None, positions, end_flag



def specific_weather(location, date):
    global state, slot_data, positions
    try:
        enc_location = urllib.parse.quote(location + date + ' ÎÇ†Ïî®')
        url = 'https://www.google.com/search?q=' + enc_location
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36',
            'referer': 'http://google.com'}
        req = Request(url, headers=headers)
        page = urlopen(req)
        html = page.read()
        soup = bs4.BeautifulSoup(html, 'html.parser')

        weather = soup.find('span', {'id': 'wob_dc'}).text
        temp = soup.find('span', class_='wob_t').text
        if weather == 'ÎπÑ': weather = 'ÎπÑÍ∞Ä Ïò§Í≥†'
        response = date + ' ÎÇ†Ïî®Î•º ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî. üßê\n\n' + location + 'Ïùò ' + date + ' ÎÇ†Ïî®Îäî ' + weather + ' Ïò®ÎèÑÎäî ' + temp + 'ÎèÑÏûÖÎãàÎã§.'
    except:
        response = "Ï£ÑÏÜ°Ìï¥Ïöî, ÏßÄÍ∏àÏùÄ " + location + "Ïùò ÎÇ†Ïî®Îäî Ïïå Ïàò ÏóÜÏñ¥Ïöî.  üò≠" + "\n\n" + "ÏßÄÏó≠Ïùò Ïù¥Î¶ÑÏùÑ ÏïåÎ†§Ï£ºÏãúÎ©¥ Îã§Ïãú ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî."

    print("\n\n[DEBUG2-3]specific_weather (msg) >>\n", response, end="\n\n")
    return response, state, slot_data, None, positions, end_flag



def this_week_weather(location):
    global state, slot_data, positions
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36',
            'referer': 'http://google.com'}

        days = ['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº']
        templete_msg = location + 'Ïùò Ïù¥Î≤àÏ£º ÎÇ†Ïî® ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî. üòÉ\n\n'
        response = []
        response.append(templete_msg)

        for i in days:
            loc = urllib.parse.quote(location + ' ' + i + 'ÏöîÏùº' + ' ÎÇ†Ïî®')
            url = 'https://www.google.com/search?q=' + loc
            print("\n\n[DEBUG2-3]this_week_weather (url) >>\n", url, end="\n\n")

            req = Request(url, headers=headers)
            page = urlopen(req)
            html = page.read()
            soup = bs4.BeautifulSoup(html, 'html.parser')
            weather = soup.find('span', {'id': 'wob_dc'}).text
            temp = soup.find('span', class_='wob_t').text
            
            if weather == 'ÎπÑ': weather = 'ÎπÑÍ∞Ä Ïò§Í≥†'
            weather = i + 'ÏöîÏùºÏùò ÎÇ†Ïî®Îäî ' + weather + ' Ïò®ÎèÑÎäî ' + temp + 'ÎèÑ ÏûÖÎãàÎã§.\n'
            response.append(weather)
    except:
        print("############################")
        print("#  WEATHER CRAWLER ERROR   #")
        print("############################")

        response = "Ï£ÑÏÜ°Ìï¥Ïöî, ÏßÄÍ∏àÏùÄ " + location + "Ïùò ÎÇ†Ïî®Îäî Ïïå Ïàò ÏóÜÏñ¥Ïöî.  üò≠" + "\n\n" + "ÏßÄÏó≠Ïùò Ïù¥Î¶ÑÏùÑ ÏïåÎ†§Ï£ºÏãúÎ©¥ Îã§Ïãú ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî."

    print("\n\n[DEBUG2-3]this_week_weather (msg) >>\n", response, end="\n\n")
    return ' '.join(response), state, slot_data, None, positions, end_flag